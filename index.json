[{"content":"Clace can currently be installed from source. Other installation options will be added soon.\nInstall from Source # To install from source\nEnsure that a recent version of Go is available, version 1.21.0 or newer Checkout the Clace repo, cd to the checked out folder Build the clace binary and place in desired location, like $HOME # Ensure go is in the $PATH mkdir $HOME/clace_source \u0026amp;\u0026amp; cd $HOME/clace_source git clone -b main https://github.com/claceio/clace \u0026amp;\u0026amp; cd clace go build -o $HOME/clace ./cmd/clace/ Initial Configuration # To use the clace service, you need an initial config file with the service password and a work directory. The below instructions assume you are using $HOME/clhome/clace.toml as the config file and $HOME/clhome as the work directory location.\nCreate the clhome directory Create the clace.toml file, with a randomly generate password for the admin user account export CL_HOME=$HOME/clhome \u0026amp;\u0026amp; mkdir $CL_HOME CL_PASSWD=`openssl rand -base64 18` echo \u0026#34;admin_password = \\\u0026#34;$CL_PASSWD\\\u0026#34;\u0026#34; \u0026gt; $CL_HOME/clace.toml unset CL_PASSWD Start the service # To start the service, the CL_HOME environment variable has to point to the work directory location and the CL_CONFIG_FILE env variable should point to the config file.\nexport CL_HOME=$HOME/clhome export CL_CONFIG_FILE=$CL_HOME/clace.toml $HOME/clace server start Adding export CL_HOME=$HOME/clhome and export CL_CONFIG_FILE=$CL_HOME/clace.toml to your shell RC file will remove the need to always set these env variables.\nThe service logs will be going to $CL_HOME/logs. To get the logs on the console also, you can add -c -l DEBUG to the server start command.\nThe service will be started on https://localhost:25223 by default.\nRunning the client # The client can be used to install and manage applications. To run the client, the CL_CONFIG_FILE environment variable should be set pointing to the config file export CL_CONFIG_FILE=$HOME/clhome/clace.toml.\nLoad an App # To create an app, run\n$HOME/clace app create --is_dev /disk_usage $HOME/clace_source/examples/disk_usage/ To audit and approve the app\u0026rsquo;s security policies, run\n$HOME/clace app audit --approve /disk_usage This will create an app at /disk_usage with the example disk_usage app. The disk_usage app provides a web interface for the du command, allowing the user to explore the subfolders which are consuming most disk space.\nTo access the app, go to https://127.0.0.1:25223/disk_usage. Use admin as the username and use the admin_password previously added to the $HOME/clhome/clace.toml config file. Allow the browser to connect to the self-signed certificate page. Or connect to http://127.0.0.1:25222/disk_usage to avoid the certificate issue.\nThe code for the example app is here. app.star is the starlark config and app.go.html is the html template. The other files are generated files and are created by the system on app initialization.\n","date":"1 January 0001","permalink":"/docs/installation/","section":"Clace Documentation","summary":"Clace can currently be installed from source.","title":"Installation"},{"content":"Clace Server # The Clace server picks up its configuration from the config file specified at startup.\n$ clace server start -h NAME: clace server start - Start the clace server USAGE: clace server start [command options] [arguments...] OPTIONS: --server_uri value, -s value The server connection uri (default: \u0026#34;$CL_HOME/run/clace.sock\u0026#34;) [$CL_SERVER_URI] --admin_user value, -u value The admin user name (default: \u0026#34;admin\u0026#34;) [$CL_ADMIN_USER] --admin_password value, -w value The admin user password [$CL_ADMIN_PASSWORD] --http.host value, -i value The interface to bind on for HTTP (default: \u0026#34;127.0.0.1\u0026#34;) [$CL_HTTP_HOST] --http.port value, -p value The port to listen on for HTTP (default: 25222) [$CL_HTTP_PORT] --https.host value The interface to bind on for HTTPS (default: \u0026#34;0.0.0.0\u0026#34;) [$CL_HTTPS_HOST] --https.port value The port to listen on for HTTPS (default: 25223) [$CL_HTTPS_PORT] --logging.level value, -l value The logging level to use (default: \u0026#34;INFO\u0026#34;) [$CL_LOGGING_LEVEL] --logging.console, -c Enable console logging (default: false) [$CL_LOGGING_CONSOLE] --help, -h GLOBAL OPTIONS: --config_file value, -c value TOML configuration file [$CL_CONFIG_FILE] --help, -h show help All the parameters have default values, specified in the code at clace.default.toml.\nA user-specified config file is required. The location of this file can be set using the command line arg --config_file. If CLI arg is not specified, the environment variable CL_CONFIG_FILE is used to locate the config file. There is no default location for this file, if no CLI argument and env value are specified, then no configuration file is loaded.\nAll arguments are read from the user specified configuration file. Some arguments are further configurable in the CLI or env. For example, set --http.host=7777 or env CL_HTTP_PORT to set the http port. The precedence order, from highest priority to lowest is:\nCLI argument ENV variable User specified config Default config in the source code for the Clace build version Home Directory # The CL_HOME environment variable used to locate the home directory for the Clace server. If no value is set, this defaults to the directory from which the Clace server was started. This location is used to store:\nThe sqlite database containing the metadata information, default is $CL_HOME/clace.db The logs for the service, under the logs folder. The config folder contains the certificates to be use for TLS. The run folder contains app specific temporary files. Clace Client CLI # By default, the Clace client uses Unix domain sockets to connect to the Clace server. Admin API calls to manage applications are disabled over HTTP/HTTPS by default. To enable remote API calls, the server needs to be changed to add the following\n[security] admin_over_tcp = true If running the Clace client from a remote machine, the config options required for the client are:\nserver_url = \u0026#34;https://127.0.0.1:25223\u0026#34; admin_user = \u0026#34;admin\u0026#34; admin_password = \u0026#34;\u0026#34; # Change to actual password skip_cert_check = false # Change to true if using self-signed certs These can be specified in a client config file or can be set in the CLI command line. All other config entries are ignored by the Clace client. Note that to connect to a Clace server over HTTP remotely, the server needs to be bound to the all interface(0.0.0.0), see here.\nIf server_url is set to the https endpoint and the Clace server is running with a self-signed certificate, set skip_cert_check = true in config or pass --skip_cert_check=true in client commands to disable the TLS certificate check.\n","date":"1 January 0001","permalink":"/docs/configuration/overview/","section":"Clace Documentation","summary":"Clace Server # The Clace server picks up its configuration from the config file specified at startup.","title":"Overview"},{"content":"Most configuration options specified in the following sections are for the Clace server. The Clace client CLI, which talks with the Clace server over a REST API uses a small subset of the config properties. If the Clace client runs on the same machine as the server, then the same config file can be used for both. See here for details.\n","date":"1 January 0001","permalink":"/docs/configuration/","section":"Clace Documentation","summary":"Most configuration options specified in the following sections are for the Clace server.","title":"Configuration"},{"content":"HTTP # For HTTP requests, by default the Clace service listens on port 25223, on the localhost(127.0.0.1) interface. This means the HTTP port can be accessed from the same machine, it cannot be accessed remotely. To configure this, update the config file\n[http] host = \u0026#34;127.0.0.1\u0026#34; # bind to localhost by default for HTTP port = 25223 # default port for HTTP to desired values. Port 0 means bind to any available port. Port -1 means disable HTTP access. Use host as 0.0.0.0 to bind to all available interfaces.\nHTTPS # For HTTPS requests, the Clace service listens on port 25224 by default, on the any(0.0.0.0) interface. This means the HTTPS port can be accessed from the same machine and also remotely. The various HTTPS config settings are:\n# HTTPS port binding related Config [https] host = \u0026#34;0.0.0.0\u0026#34; # bind to all interfaces (if port is \u0026gt;= 0) port = 25224 # port for HTTPS enable_cert_lookup = true # enable looking for certificate files on disk before using Let\u0026#39;s Encrypt service_email = \u0026#34;\u0026#34; # email address for registering with Let\u0026#39;s Encrypt. Set a value to enable automatic certs use_staging = true # use Let\u0026#39;s Encrypt staging server cert_location = \u0026#34;$CL_HOME/config/certificates\u0026#34; # where to look for existing certificate files storage_location = \u0026#34;$CL_HOME/run/certmagic\u0026#34; # where to cache dynamically created certificates Port 0 means bind to any available port. Port -1 means disable HTTPS access.\nTLS Certificates # The default configuration is:\nDuring the first HTTPS request, $CL_HOME/config/certificates is looked up for a crt and key file in the PEM format matching the domain name as passed to the server. If a matching certificate is found, that is used. If no domain specific certificate is found, then the default certificate default.crt and default.key are looked up. If found, that is used. If default certificate is not found, and Lets Encrypt based certificate creation is disabled (the default), then a self-signed certificate is auto created in the certificates folder. The intent is to allow custom certificates to be placed in the certificate folder, which will be used. If not found, a self-signed certificate is created and used. For example, if a file example.crt and example.key are found in te certificates folder, those are used for example.com domain.\nEnable Automatic Signed Certificate # Clace uses the certmagic library for fully-managed TLS certificate issuance and renewal. Certmagic is disabled by default. To enable, the pre-requisites are:\nThe https config is using 443 as the port number. Running on privileged ports requires additional setup There is an DNS entry created pointing your host name or domain wildcard to the IP address of the host running the Clace server. This has to be done in your DNS provider config. Port 443 is reachable from the public internet. This has to be done in your infrastructure provider network settings. Once the pre-requisites are met, set the service_email config parameter to your email address. This enables certmagic based certificate creation. The config will look like:\n# HTTPS port binding related Config [https] host = \u0026#34;0.0.0.0\u0026#34; port = 443 enable_cert_lookup = true service_email = \u0026#34;MY_EMAIL@example.com\u0026#34; # CHANGE to your email address use_staging = true # CHANGE to false for production cert_location = \u0026#34;$CL_HOME/config/certificates\u0026#34; storage_location = \u0026#34;$CL_HOME/run/certmagic\u0026#34; Test out the certificate creation. If the certificate is getting created, change use_staging to false. Let\u0026rsquo;s Encrypt has strict rate limits, use the staging config to ensure that the pre-requisites are met before using the production config.\nWith this config, the certificates folder is looked up for any custom certificates for the domain. If not found, certmagic is used to create the certificate. Change enable_cert_lookup to false to disable local certificate lookup. If enable_cert_lookup is false, and service_email also is unset (certmagic is disabled), then the default.crt certificate is used for all requests.\nPrivileged Ports # On Linux, binding to low ports is disabled for non-root users. To enable binding to port 80 for HTTP and 443 for HTTPS, run the command\nsudo setcap cap_net_bind_service=+ep /path/to/clace_binary This would be required after any new build or update of the Clace binary.\nNotes # Please provide a valid email address in service_email. This allows you to receive expiration emails and also allows the CA to contact you if required. Start the configuration with staging use_staging = true, change to production config use_staging = false after ensuring that DNS and networking is working fine. If port 0 is used, the service will bind to any available port. Look at the stdout or logs to find the port used. Clients would have to be updated after every server restarted to point to the new port. Only the TLS-ALPN challenge is enabled in Clace. The HTTP and DNS based challenges are not supported currently. If Clace is running behind a load balancer, ensure that the load balancer is doing TLS pass-through. If TLS termination is done in the load balancer, then the automatic certificate management done by Clace through certmagic will not work. ","date":"1 January 0001","permalink":"/docs/configuration/networking/","section":"Clace Documentation","summary":"HTTP # For HTTP requests, by default the Clace service listens on port 25223, on the localhost(127.","title":"Ports and Certificates"},{"content":"Request Routing # The Clace server can host multiple applications simultaneously. Each application gets a dedicated path, the application can use all sub-paths within that without conflicts with other applications.\nWhen an application is created, a path needs to be specified and a domain can be optionally specified. Routing for application requests is done based on domain and path. The domain is the namespace within which the paths are resolved.\nConsider this scenario:\nApp A is installed at /utils/appA App B is installed at /appB App C is installed at the root level / for domain example.com App D is installed at /test for test.mydomain.com App E is installed at /test2 for test.mydomain.com For every API call, the Clace server first checks whether the API call is against a domain namespace which is currently configured in Clace. If so, applications matching that domain are looked up. If no matching domain is located, then the default namespace (with no domain) is looked up.\nFor the above scenario:\nRequests to /utils/appA/* for any domain other than example.com and test.mydomain.com will go to App A. Requests to /appB/* for any domain other than example.com and test.mydomain.com will go to App B. Requests to example.com for any path will always go to App C, since it is installed at the root path. Requests to test.mydomain.com:/test/* will go to App D. Requests to test.mydomain.com:/test2/* will go to App E. Requests to test.mydomain.com for any path other than /test or /test2 will fail with a 404. Creating Applications # When an app is being created, a path and an optional domain need to be specified. For the above example scenario:\nNo new apps can be created for example.com domain, since App C is installed at the root path. For the test.mydomain.con domain, no new app can be created under /test and /test2, other paths are available. For the default domain, /utils/appA and /appB are taken, other paths are available. New apps can be created under any path, including root path, for new domains and subdomains, like test.example.com. Notes # The domain specified for the app is used only for routing requests. The user has to ensure that the actual DNS routing is done properly outside of Clace for the API calls to land on the Clace server. Using wildcard DNS entries will reduce the work required in the DNS service. So if *.example.com points to the IP address of the Clace service, any domain based routing done in Clace will work with no further DNS configuration being required. Let\u0026rsquo;s Encrypt requires DNS based challenges for wildcard certificates, TLS-ALPN is not supported. /_clace/ at the root level and /_clace_app/ within an app path are reserved paths, they are used by the Clace server, requests will not reach the app. This applies for all domains. ","date":"1 January 0001","permalink":"/docs/applications/","section":"Clace Documentation","summary":"Request Routing # The Clace server can host multiple applications simultaneously.","title":"Managing Applications"},{"content":"What is Clace? # Clace is an open-source project (Apache-2.0 Licensed) aimed at enabling a simple and secure platform to develop and deploy internal web applications. Clace provides a web application server focused on securely running multiple applications on a single installation. Applications are full stack, with a backend which can talk to external endpoints, the frontend can be auto generated forms or fully customizable web applications.\nProject Goals # The goal of this project is to make it easy for individuals and teams to develop and manage lightweight full stack applications in a secure manner. Fully configurable and secure internal web applications with minimal code is the goal. Easy integrations to enable SSO/SAML based authentication and authorization controls, audit logs and integration with secrets manager for managing credentials are goals.\nA single developer should be able to manage the full application lifecycle, frontend and backend development, test automation and production deployment. Deployments should support a gitops like approach, with automatic preview environment to verify changes before making them live.\nClace aims to give a dynamic development environment for applications with automatic reload of code changes, while providing a performant and scalable platform which is operationally simple to manage.\nTerminology # Internal applications: Web applications built or downloaded for use by an individual or teams. For users, this could be apps to manage their machine, like monitor disk usage across folders. For teams, apps could automate common operations like setting resource limits, provisioning accounts etc. Sandboxing: Sandboxing is a security mechanism to ensure that an application stays within the rules set by the admin. If an application is configured to perform GET requests, trying to do a POST request from the application will fail until the admin authorizes the application to perform POST requests. What\u0026rsquo;s with the name # The name Clace is a play on Command Line Ace, since an UI for command line applications is an initial target use-case. The name is pronounced like Place, with a C.\nWhy is there a need for such a platform? # There are tools like Rundeck and Jenkins which allow automating operational scripts. These have very limited customizability for the UI. At the other extreme, SaaS services like Retool which focus on internal tools development allow developing a customizable UI using no-code generators. These speed up the initial development experience to some extent but at the cost of operational complexity. Ongoing maintenance and updates for such low-code applications does not work well with general software development lifecycle practices. Some Retool competitors support self-hosting, but most of them use the single page application (SPA) based UI model, making ongoing maintenance and updates more difficult.\nClace aims for a middle ground, aiming for easy self-hosting and operational simplicity while allowing fully customizable lightweight applications, with a focus on security.\nWhat will success look like? # For the Clace project, success will mean:\nUsers can easily develop web applications for common use-cases Users can download and install such applications from the internet, without security being a concern Applications can be securely shared across teams, with operational concerns like SSO, audit logs etc automatically handled How is Clace implemented? # The way Clace tries to achieve these goals are:\nSingle binary web application server (in golang), with a set of plugins built in (also in golang) which allow access to external endpoints. The server is statically configured using a TOML file. Applications are configured using Starlark, which is a subset of Python. Python is an ideal glue language, Starlark is used to configure the application backend logic Multiple applications can be dynamically installed, an embedded SQLite database is used to store application metadata (Postgres support is in the roadmap). Path based routing, each app identified by a unique path. Also, domain based routing, which allows multiple domains to point to the same Clace instance, with path based routing being done independently for each domain. Automatic TLS certificate management for each domain to simplify deployments. A sandboxing layer is implemented at the Starlark(python) to Golang boundary, allowing the implementation of security and access control policies. Go code is trusted, Starlark code is untrusted. The application UI is implemented using Go HTML templates, with HTMX for interactivity. Go templates support context aware templating which prevents encoding related security issues. They also work well with the HTML fragments required for HTMX. No need to install any additional components like Python or NodeJS/NPM. Integration with tailwindcss-cli and esbuild (using the esbuild go library) is planned, but there are no plans to implement support for the full Javascript build tool ecosystem. What applications are suited for Clace? # Clace aims to provide a set of plugins which allow for features like Sandboxing for security and auto generation of test. The plugins are implemented in Go and are exposed to the application developer through a Starlark interface. The initial plugins which will be implemented are HTTP client, command line application (CLI) runner, Slack, Github etc. The plugins will limit which kinds of applications are suited for Clace.\nApplications suited for Clace would include:\nExposing a UI for a command line application Exposing a UI for a existing REST service What applications are NOT suited for Clace? # Applications not suited for Clace would include:\nApplications which need to implement a complex database model, those would be better handled with Django/Rails/Spring Boot like frameworks. Applications which require a SPA style UI. This page gives a good overview of when a Hypermedia style UI would be a good fit. Since the Javascript build tooling support will be limited in Clace, Clace is not a backend to use when the intent is to develop a React/Angular/Vue SPA frontend. Clace is intended as platform to use when the UI can be a Hypermedia based one. Current Status # The development of Clace was started in April 2023. As of May 2023, Clace is in a early prototype state. The current status is:\nClient and server (in a single binary) for service management and configuration Initial support for application development with Starlark based configuration Go HTML template loading and caching for request processing HTTP plugin for communicating with REST endpoints Built in admin account for local development Auto-sync (file system watcher) and Auto-reload using SSE (automatic UI refresh) for speeding up the application development cycle The next steps are to polish the application development and related configuration, add sandboxing rules, add support for SSO and RBAC etc. The aim is to do a beta release by September 2023 and a 1.0 release later in the year.\nWho is behind this project? # The project has been started by Ajay Kidave. Ajay\u0026rsquo;s background has been in database systems and enterprise integration tools. Clace is an independent project that Ajay started while continuing to work as a part-time consultant.\nWhat is the longer-term plan for Clace? # The current plan is to develop the open source project, with the aim of making Clace a great platform for managing internal applications. The service can currently scale up vertically, support for metadata storage in Postgres will be added which will enable horizontal scaling also.\nFor workload isolation and security reasons, some use cases might require a more distributed backend approach. An worker/agent mode is planned in the longer-term. This will mean the Clace server will not actually run the application code, the application code will run on distributed agents. The agent mode, when added, might use a different licensing model. Most regular use-cases should not require the agent mode; vertical and horizontal scaling should cover normal workloads. The core functionality of Clace, including SSO integration and all plugins, will remain Apache-2.0 licensed.\n","date":"1 January 0001","permalink":"/about/","section":"Clace","summary":"What is Clace?","title":"About Clace"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"\nClace® is an open-source project which makes it easy to develop and manage secure web applications for internal uses. Clace applications can have an auto generated interface or a fully customized UI. Clace provides integrations to enable SSO/SAML based authentication and authorization controls, audit logs and integration with secrets manager for managing credentials. Applications run in a security sandbox, enabling admins to control what actions can be performed by each app.\nSecure platform with application sandboxing\nHTML template driven UI interface\nSimple application configuration (using Python syntax with Starlark)\nSingle binary deployment for easy installation\nGithub integration, for gitops workflow\nSign up for email updates Subscribe ","date":"1 January 0001","permalink":"/","section":"Clace","summary":"","title":"Clace"},{"content":"Clace is an open-source project which aims to make it easy for individuals and teams to develop and manage lightweight full stack web applications in a secure manner.\n","date":"1 January 0001","permalink":"/docs/","section":"Clace Documentation","summary":"Clace is an open-source project which aims to make it easy for individuals and teams to develop and manage lightweight full stack web applications in a secure manner.","title":"Clace Documentation"},{"content":"","date":"1 January 0001","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"}]