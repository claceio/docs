[{"content":"Clace is an open-source project (Apache-2.0 Licensed) aimed at enabling a simple and secure approach to develop and deploy internal web applications.\nGoal # The goal of this project is to make it easy for individuals and teams to develop and manage lightweight full stack applications in a secure manner. The applications can have an auto generated form interface or a fully customizable UI. The platform should provide easy integrations to enable SSO/SAML based authentication and authorization controls, audit logs and integration with secrets manager for managing credentials.\nPlugins will allow communicating with external endpoints, with application level sandboxing rules to control what each application can do. End-to-end automated testing will be made possible using a record-replay mechanism at the plugin boundary.\nA single developer should be able to manage the full stack, frontend and backend development, test automation and production deployment. Deployments should support a gitops like approach, with automatic preview environment to verify changes before making them live.\nClace aims to give a dynamic development environment for applications (like Python), with automatic reload of code changes, while providing a performant and scalable platform which is operationally simple to manage.\nWhat is Clace # Clace is a platform which provides a web application server focused on running securely multiple applications on a single installation. Applications are full stack, with a backend which can talk to external endpoints. The frontend can be auto generated forms or fully customizable web applications.\nTerminology # Internal applications: Web applications built or downloaded for use by an individual or teams. For users, this could be apps to manage their machine, like monitor disk usage across folders. For teams, apps could automate common operations like setting resource limits, provisioning accounts etc. Sandboxing: Sandboxing is a security mechanism to ensure that an application stays within the rules set by the admin. If an application is configured to perform GET requests, trying to do a POST request from the application will fail until the admin authorizes the application to perform POST requests. What\u0026rsquo;s with the name # The name Clace was the end-result of an intense process trying to come up with a short and easy to remember name which is not already taken. Clace is a play on Command Line Ace, since an UI for command line applications is an initial target usecase. The name is pronounced like Place, with a C.\nWhy is there a need for such a platform # There are tools like Rundeck and Jenkins which allow automating operational scripts. These have very limited customizability for the UI. At the other extreme, SaaS services like Retool which focus on internal tools development allow developing a customizable UI using no-code generators. These speed up the initial development experience to some extent but at the cost of operational complexity. Ongoing maintenance and updates for such low-code applications does not work well with general software development lifecycle practices. Some Retool competitors support self-hosting, but most of them still follow the React component based UI, making the UI less easily maintained.\nClace aims for a middle ground, aiming for self hosting and operational simplicity while allowing fully customizable lightweight applications, with a focus on security. Configurable secure internal applications with minimal code is the goal.\nWhat will success look like # For the Clace project, success will mean:\nUsers can easily develop web applications for common use-cases Users can download and install such applications from the internet, without security being a concern Applications can be shared with teams and easily distributed and secured How is Clace implemented # The way Clace tries to achieve these goals are:\nSingle binary web application server (in golang), with a set of plugins built in (also in golang) which allow access to external endpoints. The server is statically configured using a TOML file. Multiple applications can be dynamically installed, an embedded SQLite database is used to store application metadata (Postgres support is in the roadmap). Path based routing, each app identified by a unique path. Also, domain based routing, which allows multiple domains to point to the same Clace instance, with path based routing being done independently for each domain. Automatic TLS certificate management for each domain to simplify deployments. Applications are configured using Starlark, which is Python dialect. Python is an ideal glue language, Starlark is a simpler subset of Python A sandboxing layer is implemented at the Starlark(python) to Golang boundary, allowing the implementation of security and access control policies. Go code is trusted, Starlark code is untrusted. The application UI is implemented using Go HTML templates, with HTMX for interactivity. Go templates support context aware templating which prevents encoding related security issues. They also work well with the HTML fragment required for HTMX. No need to install any additional components like Python or NodeJS. Integration with tailwindcss-cli and esbuild (using the esbuild go library) is planned, but there are no plans to implement support for the full Javascript build tool ecosystem. What applications are suited for Clace # Claces aims to provide a set of plugins which allow for features like\nSandboxing for security Auto generation of test The plugins are implemented in Go and are exposed to the application developer through a Starlark interface. The initial plugins which will be implemented are HTTP client, command line application (CLI) runner, Slack, Github etc.\nThe plugins will limit which kinds of applications are suited for Clace. If there is an existing application which exposes a REST API, Clace will make it possible to develop a web UI for that. Same applies for a web UI which allows interacting with one or more SaaS applications through their REST API. For command line applications or scripts, Clace will make it possible to expose a web UI for the CLI. For workflows requiring an approval or notification step, the Slack plugin will allow developing such applications.\nWhat applications are NOT suited for Clace # The types of applications that are suited for Clace will be limited by the plugins. If the application is a CRUD application with a complex database model, those would be better handled with Django/Rails/Spring Boot like frameworks.\nSince the Javascript build tooling support will be limited, Clace is not a backend to use when the intent is to develop a React/Angular/Vue SPA frontend. Clace is intended as platform to use when the UI can be a HTML template based one.\nCurrent Status # The development of Clace was started in April 2023. As of today (May 26 2023), Clace is in a very early prototype state. The current status is:\nClient and server (in a single binary) for service management and configuration Initial support for application development with Starlark based configuration Go HTML template loading and caching for request processing HTTP plugin for communicating with REST endpoints Built in admin account for local development Auto-sync (file system watcher) and Auto-reload using SSE (automatic UI refresh) for speeding up the application development cycle The next steps are to polish the application development and related configuration, add sandboxing rules, add support for SSO and RBAC etc. The aim is to do a beta release by September 2023 and an 1.0 release later this year.\nWho is behind this project # The project has been started by Ajay Kidave. Ajay\u0026rsquo;s background has been in database systems and enterprise integration tools. Clace is an independent passion project, while continuing to work as a part-time consultant.\nWhat is future plan for Clace # The plan currently is to build out the open source project and make it a great platform for managing internal applications. The service can currently scale up vertically, support for metadata storage in Postgres will be added which will enable horizontal scaling also.\nFor workload isolation and security reasons, some use cases might require a more distributed backend approach. An worker/agent mode is planned in the longer-term. This will mean the Clace server will not actually run the application code, the application code will run on agents which are distributed on other nodes. The agent mode, when/if added, might use a different licensing model. Most regular usecases should not require the agent mode; vertical and horizontal scaling should cover normal workloads.\n","date":"1 January 0001","permalink":"/about/","section":"About Clace","summary":"Clace is an open-source project (Apache-2.","title":"About Clace"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"\nClace is an open-source project which aims to make it easy for individuals and teams to develop and manage lightweight full stack applications in a secure manner. The applications can have an auto generated form interface or a fully customized UI. Clace provides integrations to enable SSO/SAML based authentication and authorization controls, audit logs and integration with secrets manager for managing credentials. Secure platform with application sandboxing\nHTML template driven UI interface\nStarlark based application configuration (Python like)\nGolang based backend for simplifying deployments\nGithub integration\nSign up for email updates Subscribe ","date":"1 January 0001","permalink":"/","section":"Clace","summary":"","title":"Clace"},{"content":"Clace is an open-source project which aims to make it easy for individuals and teams to develop and manage lightweight full stack web applications in a secure manner. The applications can have an auto generated form interface or a fully customized UI. Clace provides integrations to enable SSO/SAML based authentication and authorization controls, audit logs and integration with secrets manager for managing credentials. Applications run in a security sandbox, enabling admins to control what actions can be performed by the app.\n","date":"1 January 0001","permalink":"/docs/","section":"Clace Documentation","summary":"Clace is an open-source project which aims to make it easy for individuals and teams to develop and manage lightweight full stack web applications in a secure manner.","title":"Clace Documentation"},{"content":"","date":"1 January 0001","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"}]