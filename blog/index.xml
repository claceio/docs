<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog</title><link>https://clace.io/blog/</link><description>Recent content in Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 09 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://clace.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Errors and Exceptions: Is there a third option?</title><link>https://clace.io/blog/errors/</link><pubDate>Mon, 09 Dec 2024 00:00:00 +0000</pubDate><guid>https://clace.io/blog/errors/</guid><description>
&lt;div
class="hx-overflow-x-auto hx-mt-6 hx-flex hx-rounded-lg hx-border hx-py-2 ltr:hx-pr-4 rtl:hx-pl-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-blue-200 hx-bg-blue-100 hx-text-blue-900 dark:hx-border-blue-200/30 dark:hx-bg-blue-900/30 dark:hx-text-blue-200">
&lt;div class="ltr:hx-pl-3 ltr:hx-pr-2 rtl:hx-pr-3 rtl:hx-pl-2">
&lt;div
class="hx-select-none hx-text-xl"
style="font-family: 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';">
ðŸ“Ž
&lt;/div>
&lt;/div>
&lt;div class="hx-w-full hx-min-w-0 hx-leading-7">
&lt;div class="hx-mt-6 hx-leading-7 first:hx-mt-0">
Clace is an
&lt;a href="https://github.com/claceio/clace">open source project&lt;/a>
building a platform for developing internal tools and deploying them
locally or across a team. Clace can be used to develop auto-generated UI
for backend actions or to develop custom Hypermedia driven web apps. Clace
also implements an application server for deploying containerized web
apps.
&lt;br />
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h2>Background&lt;span class="hx-absolute -hx-mt-20" id="background">&lt;/span>
&lt;a href="#background" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Most programming languages handle error conditions either by supporting error values or by means of exceptions. Error return value support varies, with some statically typed languages enforcing that the error conditions be handled. With exceptions, the invoker can either catch and handle it or it automatically gets thrown up the stack. The purpose of error handling is to allow an invoker to either handle the issue or allow the invoker to return the error to the caller.&lt;/p>
&lt;p>Exceptions have the advantage of the error handling being automatic. Error values have the advantage of requiring more explicit error handling, at the cost of verbosity.&lt;/p>
&lt;h2>Error handling for Glue code&lt;span class="hx-absolute -hx-mt-20" id="error-handling-for-glue-code">&lt;/span>
&lt;a href="#error-handling-for-glue-code" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>For code which is gluing together multiple API&amp;rsquo;s, error handling can be tedious. Some languages have specific support for this. The most famous example is the &lt;a href="https://www.baeldung.com/linux/bash-script-raise-error" target="_blank" rel="noopener">errexit&lt;/a> setting &lt;code>set -e&lt;/code> in shell scripts. This will automatically check each command for error return status and fail the script if an error occurs.&lt;/p>
&lt;h2>Trade-Offs&lt;span class="hx-absolute -hx-mt-20" id="trade-offs">&lt;/span>
&lt;a href="#trade-offs" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>The two main trade-offs we are handling are:&lt;/p>
&lt;ul>
&lt;li>Exceptions are automatically checked, but they result in error handling being done away from the code which actually failed.&lt;/li>
&lt;li>Error values need to be checked explicitly, but the error handling code is local to where the error occurred. In most languages, it is easy to miss checking for errors (Rust being one exception with the Result type)&lt;/li>
&lt;/ul>
&lt;p>The ideal scenario in terms of code verbosity is that error handling should be automatic. The ideal scenario in terms of proper error handling is that the explicit error checks should be easy for the invoker, else the automatic error handling kicks in.&lt;/p>
&lt;h2>Is there a third option?&lt;span class="hx-absolute -hx-mt-20" id="is-there-a-third-option">&lt;/span>
&lt;a href="#is-there-a-third-option" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Clace is built to be a platform for building internal tools. Clace is built in Go and uses &lt;a href="https://starlark-lang.org/" target="_blank" rel="noopener">Starlark&lt;/a> for app configuration and also for API business logic. Starlark does not support exceptions and does not support multi value returns. This makes error handling difficult. The solution implemented for Clace is an API boundary error checker with the following properties:&lt;/p>
&lt;ul>
&lt;li>Automatic error handling, no explicit error checks required for every API call&lt;/li>
&lt;li>Easy way to do explicit error checks when errors are expected&lt;/li>
&lt;/ul>
&lt;p>This gives the best of both worlds. All error conditions are automatically checked like exceptions. When explicit error checks are required, they are easy to do like error values.&lt;/p>
&lt;h2>How does this work?&lt;span class="hx-absolute -hx-mt-20" id="how-does-this-work">&lt;/span>
&lt;a href="#how-does-this-work" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>The &lt;a href="https://clace.io/docs/plugins/overview/#automatic-error-handling" target="_blank" rel="noopener">automatic error handling&lt;/a> feature of Clace keeps track of every plugin call&amp;rsquo;s status. If the plugin call fails, the Clace runtime makes sure that return value cannot be accessed, unless an explicit error check was done. If no explicit check is done, the Clace runtime will fail the API, calling the user defined error handler or a generic error handler if none is defined. So for the code&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code> def insert(req):
store.begin()
book = doc.bookmark(&amp;#34;abc&amp;#34;, [])
ret = store.insert(table.bookmark, book)
print(ret.value)
store.commit()&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>If begin() fails, the call to insert() will fail since the previous error was not handled (begin&amp;rsquo;s error message is raised).&lt;/li>
&lt;li>If insert() fails, the value access will fail, so the print will not run&lt;/li>
&lt;li>If commit() fails, the Clace runtime will first check whether the last plugin failed before handling the API response.&lt;/li>
&lt;/ul>
&lt;p>Thread locals are used to track errors across plugin API calls. This works since an API handler Starlark function is single threaded. When begin() fails, it sets a thread local. If the error is explicitly checked, like&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>ret = store.begin()
if ret.error:
pass
print(ret.value)&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>then the thread local state is cleared. So if the code is doing explicit error checks, the automatic error handling is disabled.&lt;/p>
&lt;h2>Can this be a generic solution?&lt;span class="hx-absolute -hx-mt-20" id="can-this-be-a-generic-solution">&lt;/span>
&lt;a href="#can-this-be-a-generic-solution" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>The Clace runtime provides all the APIs used by Clace apps by means of plugin calls. This solution can be applied when&lt;/p>
&lt;ul>
&lt;li>All code that can cause errors are provided through a standard API interface&lt;/li>
&lt;li>Thread locals are feasible for tracking errors&lt;/li>
&lt;li>There is a standard error handling function which does something useful (could be user defined)&lt;/li>
&lt;/ul>
&lt;p>The error check happens at the API boundary (Starlark to Go in this case). If there is code which does excessive CPU usage or memory allocation, that code will run before the automatic error check kicks in. That should not be an issue in practice for glue code as used by Clace.&lt;/p>
&lt;p>This error handling solution is limited in scope to use cases where glue scripts are being written which make lots of API calls. Basically provider a shell errexit type facility for non shell code. This does not support error handling which needs to happen within user defined code, like one function which returns an error to be handled by another function.&lt;/p>
&lt;p>Handling resource leaks is another concern. For Clace, since all resources (transactions, result sets etc) are created through the plugin API, they are automatically closed when an error occurs.&lt;/p></description></item><item><title>Missed Connections: AppServers in the Containerized Landscape</title><link>https://clace.io/blog/appserver/</link><pubDate>Thu, 07 Nov 2024 00:00:00 +0000</pubDate><guid>https://clace.io/blog/appserver/</guid><description>
&lt;div
class="hx-overflow-x-auto hx-mt-6 hx-flex hx-rounded-lg hx-border hx-py-2 ltr:hx-pr-4 rtl:hx-pl-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-blue-200 hx-bg-blue-100 hx-text-blue-900 dark:hx-border-blue-200/30 dark:hx-bg-blue-900/30 dark:hx-text-blue-200">
&lt;div class="ltr:hx-pl-3 ltr:hx-pr-2 rtl:hx-pr-3 rtl:hx-pl-2">
&lt;div
class="hx-select-none hx-text-xl"
style="font-family: 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';">
ðŸ“Ž
&lt;/div>
&lt;/div>
&lt;div class="hx-w-full hx-min-w-0 hx-leading-7">
&lt;div class="hx-mt-6 hx-leading-7 first:hx-mt-0">
Clace is an
&lt;a href="https://github.com/claceio/clace">open source project&lt;/a>
building a platform for developing internal tools and deploying them
locally or across a team. Clace can be used to develop auto-generated UI
for backend actions or to develop custom Hypermedia driven web apps. Clace
also implements an application server for deploying containerized web
apps.
&lt;br />
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>Application Servers can make application deployment easy. AppServers do not support all the features of a PaaS solution but that comes with the benefit of zero config deployments. Especially for internal tools, AppServers are a great alternative to building a deployment solution on top of Kubernetes. Clace is the first AppServer built for use with containers.&lt;/p>
&lt;h2>What is an Application Server&lt;span class="hx-absolute -hx-mt-20" id="what-is-an-application-server">&lt;/span>
&lt;a href="#what-is-an-application-server" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>An &lt;a href="https://en.wikipedia.org/wiki/Application_server" target="_blank" rel="noopener">Application Server&lt;/a> is a service that makes it easy to deploy applications and provides common features required by most apps. This includes implementing connection handling (HTTP request routing), deployment and versioning, logging, monitoring and authentication features.&lt;/p>
&lt;p>Many application servers are programming language &lt;a href="https://en.wikipedia.org/wiki/List_of_application_servers" target="_blank" rel="noopener">specific&lt;/a>. In the Java and .Net ecosystems, class loader level isolation is used to implement app servers. The request processing model of PHP also makes app servers suitable for serving PHP apps. For interpreted languages like Python and Ruby, there are some app servers which provide cross language support. App server support is limited for compiled languages. This article will focus on app servers which support multiple languages, since those are more widely usable.&lt;/p>
&lt;h2>Multi-Language AppServers&lt;span class="hx-absolute -hx-mt-20" id="multi-language-appservers">&lt;/span>
&lt;a href="#multi-language-appservers" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Some of the prominent multi-language app servers are:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://unit.nginx.org/" target="_blank" rel="noopener">NGINX Unit&lt;/a>: Nginx Unit is a different application from the regular Nginx web server. Unit is configured through &lt;a href="https://unit.nginx.org/controlapi/" target="_blank" rel="noopener">JSON based APIs&lt;/a>. Packaging apps to work with Unit is not straightforward. For example, see &lt;a href="https://unit.nginx.org/howto/samples/#sample-java" target="_blank" rel="noopener">Unit Java sample&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://uwsgi-docs.readthedocs.io/" target="_blank" rel="noopener">uWSGI&lt;/a>: uWSGI is a &amp;ldquo;full stack for building hosting services&amp;rdquo;. It supports many powerful features for process management. Combining all its features and configuring them correctly is non-trivial. Many languages are supported but outside of interpreted languages, it is not easy to configure. For example, see &lt;a href="https://uwsgi-docs.readthedocs.io/en/latest/JVM.html" target="_blank" rel="noopener">uWSGI Java config&lt;/a>. The uWSGI project is currently in maintenance mode.&lt;/li>
&lt;li>&lt;a href="https://www.phusionpassenger.com/" target="_blank" rel="noopener">Phusion Passenger&lt;/a>: Phusion Passenger primarily supports Ruby, Python and Javascript. Passenger 6 added support for &lt;a href="https://www.phusionpassenger.com/docs/advanced_guides/gls/" target="_blank" rel="noopener">generic apps&lt;/a>. This requires changing the app to pass the port to use on its command line. For example, &lt;a href="https://www.phusionpassenger.com/docs/advanced_guides/gls/java.html" target="_blank" rel="noopener">Passenger Java&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>These projects either run the app in-process or use a process model to run each application separately. The in-process model has issues with ensuring stability of apps when another app misbehaves. Even with the multi-process model, complete isolation across apps is not supported.&lt;/p>
&lt;h2>AppServers Miss the Cloud-Native Train&lt;span class="hx-absolute -hx-mt-20" id="appservers-miss-the-cloud-native-train">&lt;/span>
&lt;a href="#appservers-miss-the-cloud-native-train" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Since the initial release of Docker in 2013, containers have become very popular for application deployment. Containers have the advantage of encapsulating the application runtime and dependencies in an easily deployable image. Being able to set resource limits on CPU/memory/disk usage enables isolation across applications.&lt;/p>
&lt;p>No application server currently supports running apps within containers. App servers are missing from the crowded cloud native &lt;a href="https://landscape.cncf.io/" target="_blank" rel="noopener">landscape&lt;/a> (possibly the only infrastructure software component missing there).&lt;/p>
&lt;h2>PaaS vs AppServers&lt;span class="hx-absolute -hx-mt-20" id="paas-vs-appservers">&lt;/span>
&lt;a href="#paas-vs-appservers" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Most of the recent innovation in the container orchestration space have focussed on providing support for hosting the complete software stack. This includes deploying stateless applications, stateful databases, object stores and any other type of application. The goal has been to build Platform-As-A-Service solutions (PaaS). Kubernetes is built as a &lt;a href="https://www.opensourcerers.org/2021/12/06/kubernetes-is-a-platform-for-building-platforms/" target="_blank" rel="noopener">platform for building platforms&lt;/a>. Even beyond Kubernetes, most container deployment platforms focus on trying to provide a complete PaaS solution. Since the scope of applicable use cases is large, even the simplest use case requires complex configuration with a PaaS solution.&lt;/p>
&lt;p>AppServers by definition are simpler. They support deploying stateless applications. Given the source code for a service, an AppServer can run the service and give an HTTP endpoint to access the service. AppServer can provide a standardized deployment approach, irrespective of the language/framework. AppServers do not support deploying databases or queues or object stores.&lt;/p>
&lt;p>Many teams choose managed services (like AWS RDS or MSK) for data persistence. If the stateful applications are externally managed, then AppServers can be used for deploying the stateless applications. This avoids the complexity of having to maintain PaaS configurations.&lt;/p>
&lt;h2>Cloud-Native AppServer Features&lt;span class="hx-absolute -hx-mt-20" id="cloud-native-appserver-features">&lt;/span>
&lt;a href="#cloud-native-appserver-features" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>A cloud-native application server would include the following features:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Container-Based&lt;/strong>: Uses containers for application deployment, with isolation across apps.&lt;/li>
&lt;li>&lt;strong>Easy Config&lt;/strong>: Provide zero config or simple config approach&lt;/li>
&lt;li>&lt;strong>GitOps&lt;/strong> : App deployment driven by source code changes.&lt;/li>
&lt;li>&lt;strong>Elastic Scalability&lt;/strong>: Scale down to zero, scale up as required based on load.&lt;/li>
&lt;li>&lt;strong>Declarative Configuration&lt;/strong>: All configuration is applied declaratively as opposed to being imperative.&lt;/li>
&lt;/ul>
&lt;p>The AppServer is not replacing the language specific services. For example, with Python, Gunicorn/Uvicorn would provide the WSGI/ASGI functionality within the container.&lt;/p>
&lt;h2>AppServer Features of Clace&lt;span class="hx-absolute -hx-mt-20" id="appserver-features-of-clace">&lt;/span>
&lt;a href="#appserver-features-of-clace" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Clace is built as a platform for teams to deploy internal tools. As part of that, Clace implements an AppServer to deploy containerized apps. The goal is to make it easy for teams to deploy and manage Streamlit/Gradio type apps for internal users. Clace provides blue-green staged deployment, GitOps, OAuth access control, secrets management etc for the apps.&lt;/p>
&lt;p>With Clace, any Containerized app (having a &lt;code>Dockerfile&lt;/code>) can be installed using a command like&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">clace app create --spec container --approve github.com/&amp;lt;USERID&amp;gt;/&amp;lt;REPO&amp;gt; /myapp&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>The app will be available at the /myapp url. For many &lt;a href="https://github.com/claceio/appspecs" target="_blank" rel="noopener">frameworks&lt;/a>, zero config is required. Not even a &lt;code>Dockerfile&lt;/code> is required. For example&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">clace app create --spec python-streamlit --branch master --approve github.com/streamlit/streamlit-example /streamlit_app&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>deploys a &lt;a href="https://streamlit.io/" target="_blank" rel="noopener">Streamlit&lt;/a> based app.&lt;/p>
&lt;p>Each app has a dedicated url, domain based or path based. Clace ensures that no other app can conflict with that path. Clace can currently scale between zero and one instance of the container. More than one is not supported since Clace runs on a single machine (multi-node support is planned). Clace has a CLI interface currently, a &lt;a href="https://github.com/claceio/clace/issues/34" target="_blank" rel="noopener">declarative interface&lt;/a> based on the CLI is planned.&lt;/p>
&lt;picture class="responsive-picture" style="display: block; margin-left: auto; margin-right: auto;">
&lt;source media="(prefers-color-scheme: dark)" srcset="https://clace.io/AppServerDark.png">
&lt;source media="(prefers-color-scheme: light)" srcset="https://clace.io/AppServerLight.png">
&lt;img alt="Clace AppServer" src="https://clace.io/AppServerLight.png">
&lt;/picture>
&lt;p>For use cases where teams are deploying internal tools, Clace can provide a much simpler solution as against using a general purpose PaaS solution.&lt;/p></description></item><item><title>Using SQLite as Storage for Web Server Static Content</title><link>https://clace.io/blog/sqlite/</link><pubDate>Fri, 25 Oct 2024 00:00:00 +0000</pubDate><guid>https://clace.io/blog/sqlite/</guid><description>
&lt;div
class="hx-overflow-x-auto hx-mt-6 hx-flex hx-rounded-lg hx-border hx-py-2 ltr:hx-pr-4 rtl:hx-pl-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-blue-200 hx-bg-blue-100 hx-text-blue-900 dark:hx-border-blue-200/30 dark:hx-bg-blue-900/30 dark:hx-text-blue-200">
&lt;div class="ltr:hx-pl-3 ltr:hx-pr-2 rtl:hx-pr-3 rtl:hx-pl-2">
&lt;div
class="hx-select-none hx-text-xl"
style="font-family: 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';">
ðŸ“Ž
&lt;/div>
&lt;/div>
&lt;div class="hx-w-full hx-min-w-0 hx-leading-7">
&lt;div class="hx-mt-6 hx-leading-7 first:hx-mt-0">
Clace is an
&lt;a href="https://github.com/claceio/clace">open source project&lt;/a>
building a platform for developing internal tools and deploying them
locally or across a team. Clace can be used to develop auto-generated UI
for backend actions or to develop custom Hypermedia driven web apps. Clace
also implements an application server for deploying containerized web
apps.
&lt;br />
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h2>Background&lt;span class="hx-absolute -hx-mt-20" id="background">&lt;/span>
&lt;a href="#background" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Clace is built to serve web applications, primarily for internal tools. Clace provides functionality usually handled separately by a web server and an application server. When the development of Clace was started last year, one of the first decisions was how to store the application data (files) and metadata. The app metadata obviously made sense to store in a database, since apps are created dynamically. The app data (static files, app code, config files etc) is usually stored on the file system by most web servers.&lt;/p>
&lt;h2>Using SQLite for serving files&lt;span class="hx-absolute -hx-mt-20" id="using-sqlite-for-serving-files">&lt;/span>
&lt;a href="#using-sqlite-for-serving-files" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>For Clace, the decision was made to use &lt;a href="https://www.sqlite.org/" target="_blank" rel="noopener">SQLite&lt;/a> for app files storage instead of using the file system. The reasoning was mainly to be able to do atomic version changes. When updating an app, since there could be lots of files being updated, using a database would allow all changes to be done atomically in a transaction. This would prevent broken web pages from being served during a version change.&lt;/p>
&lt;p>Clace uploads all files to the SQLite database during app creation and updates. Files are uploaded from GitHub or from local disk. Only for &lt;a href="https://clace.io/docs/applications/lifecycle/#development-apps" >development mode&lt;/a>, the local file system is used.&lt;/p>
&lt;h2>Benefits of using SQLite&lt;span class="hx-absolute -hx-mt-20" id="benefits-of-using-sqlite">&lt;/span>
&lt;a href="#benefits-of-using-sqlite" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>The decision to use SQLite for file storage has provided lots of additional benefits (some unanticipated).&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Transactional Updates&lt;/strong> : This is the main benefit. Updating multiple files can be done in one transaction. Isolation ensures that there are no broken webapps during the update.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Deployment Rollbacks&lt;/strong>: Another of the transactional benefits is the ability to roll back deployment in case of errors. If multiple apps are being updated, all of them can be rolled back in one go. Rolling back a database transaction is much easier than cleaning up files on the file system.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>File De-duplication Across Versions&lt;/strong>: Clace automatically &lt;a href="https://clace.io/docs/applications/overview/#app-listing" >versions&lt;/a> all updates. This can lead to lots of duplicate files. The file data is stored in a table with the schema&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">files&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sha&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">text&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">compression_type&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">text&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">content&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">blob&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">create_time&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">datetime&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">PRIMARY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sha&lt;/span>&lt;span class="p">));&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>The uncompressed content SHA256 hash is used as the primary key to store the file data. This means that even if multiple versions of an app have the same file, the file contents are stored only once.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>De-duplication Across Apps&lt;/strong> : Each production app in Clace has an &lt;a href="https://clace.io/docs/applications/lifecycle/#application-types" >staging app&lt;/a>. Apps can have multiple &lt;a href="https://clace.io/docs/applications/lifecycle/#preview-apps" >previews apps&lt;/a>. This can lead to lots of duplication of files. Using the database helps avoid all the duplication. Even across apps, there are files which have the same contents. Files are de-duplicated across apps also.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Easy Backups&lt;/strong>: Using SQLite means that backups are easy. The state of the whole system, metadata and files can be backed up easily using SQLite backup tools like &lt;a href="https://litestream.io/" target="_blank" rel="noopener">Litestream&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Content Hashing&lt;/strong>: For content caching on the browser, web servers return a &lt;a href="https://en.wikipedia.org/wiki/HTTP_ETag" target="_blank" rel="noopener">ETag&lt;/a> header. Using the database for files makes it easy to save the content SHA once during file upload without having to recompute it later.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Compression&lt;/strong>: The file contents are saved &lt;a href="https://en.wikipedia.org/wiki/Brotli" target="_blank" rel="noopener">Brotli&lt;/a> compressed in the SQLite table. The database approach has the advantage that contents can be saved in multiple formats easily. GZip compressed data and uncompressed data can be added by just adding a column in the &lt;code>files&lt;/code> table.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2>Performance&lt;span class="hx-absolute -hx-mt-20" id="performance">&lt;/span>
&lt;a href="#performance" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>For Clace, the SQLite database approach provides great performance. There is no equivalent implementation using the file system to compare against, so a direct benchmark test is not done. Based on &lt;a href="https://www.sqlite.org/fasterthanfs.html" target="_blank" rel="noopener">benchmarking&lt;/a> done by the SQLite team, SQLite can have better performance than direct file system use for some workloads.&lt;/p>
&lt;h2>Multi-Node Support&lt;span class="hx-absolute -hx-mt-20" id="multi-node-support">&lt;/span>
&lt;a href="#multi-node-support" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Clace currently runs on a single node. When multi-node support is added later, the plan is to use a shared Postgres database instead of using local SQLite for metadata and file data storage. This will come with latency issues. The plan is to use a local SQLite database as a file cache to avoid latency while accessing Postgres.&lt;/p>
&lt;h2>Why this approach is not more common?&lt;span class="hx-absolute -hx-mt-20" id="why-this-approach-is-not-more-common">&lt;/span>
&lt;a href="#why-this-approach-is-not-more-common" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>One of the reasons most web servers use the file system is convenience. File updates can be done using any file system tool: rsync, tar etc work for copying files over. The other reason is probably historical: file systems are what were used before there were good in-process relational databases available. Using a database means some kind of API interface is required for uploading files, which is not always feasible.&lt;/p>
&lt;div class="hx-overflow-x-auto hx-mt-6 hx-flex hx-rounded-lg hx-border hx-py-2 ltr:hx-pr-4 rtl:hx-pl-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-orange-100 hx-bg-orange-50 hx-text-orange-800 dark:hx-border-orange-400/30 dark:hx-bg-orange-400/20 dark:hx-text-orange-300">
&lt;div class="ltr:hx-pl-3 ltr:hx-pr-2 rtl:hx-pr-3 rtl:hx-pl-2">&lt;div class="hx-select-none hx-text-xl" style="font-family: 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';">
ðŸ’¬
&lt;/div>&lt;/div>
&lt;div class="hx-w-full hx-min-w-0 hx-leading-7">
&lt;div class="hx-mt-6 hx-leading-7 first:hx-mt-0">
Discussion thread on &lt;a href="https://news.ycombinator.com/item?id=41963996" target="_blank" rel="noopener">Hacker News&lt;/a>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>Introducing Clace</title><link>https://clace.io/blog/intro/</link><pubDate>Wed, 01 Nov 2023 00:00:00 +0000</pubDate><guid>https://clace.io/blog/intro/</guid><description>
&lt;div
class="hx-overflow-x-auto hx-mt-6 hx-flex hx-rounded-lg hx-border hx-py-2 ltr:hx-pr-4 rtl:hx-pl-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-blue-200 hx-bg-blue-100 hx-text-blue-900 dark:hx-border-blue-200/30 dark:hx-bg-blue-900/30 dark:hx-text-blue-200">
&lt;div class="ltr:hx-pl-3 ltr:hx-pr-2 rtl:hx-pr-3 rtl:hx-pl-2">
&lt;div
class="hx-select-none hx-text-xl"
style="font-family: 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';">
ðŸ“Ž
&lt;/div>
&lt;/div>
&lt;div class="hx-w-full hx-min-w-0 hx-leading-7">
&lt;div class="hx-mt-6 hx-leading-7 first:hx-mt-0">
Clace is an
&lt;a href="https://github.com/claceio/clace">open source project&lt;/a>
building a platform for developing internal tools and deploying them
locally or across a team. Clace can be used to develop auto-generated UI
for backend actions or to develop custom Hypermedia driven web apps. Clace
also implements an application server for deploying containerized web
apps.
&lt;br />
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h1>Clace: Platform for Managing Internal Tools&lt;/h1>&lt;p>Clace is an &lt;a href="https://github.com/claceio/clace" target="_blank" rel="noopener">open-source&lt;/a> platform to enable easy development and deployment of web applications for internal tools. The goals for the Clace project are:&lt;/p>
&lt;ul>
&lt;li>Enable development and deployment of secure internal web applications.&lt;/li>
&lt;li>Simplify ongoing maintenance of such apps by removing build and dependency related issues. Updating an app after six months or six years should just work.&lt;/li>
&lt;li>Provide portable and flexible deployment options, easy to use on developer machines and also on a shared server across teams.&lt;/li>
&lt;/ul>
&lt;h2>Use-cases&lt;span class="hx-absolute -hx-mt-20" id="use-cases">&lt;/span>
&lt;a href="#use-cases" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Clace is built to solve two different types of use-cases:&lt;/p>
&lt;ul>
&lt;li>Custom applications: With fully customizable UI, this would be similar to solutions like &lt;a href="https://retool.com/" target="_blank" rel="noopener">Retool&lt;/a>. A low-code approach is used, with a focus on &lt;a href="https://hypermedia.systems/hypermedia-reintroduction/" target="_blank" rel="noopener">Hypermedia driven applications&lt;/a>.&lt;/li>
&lt;li>Actions: This would be similar to solutions like &lt;a href="https://www.rundeck.com/" target="_blank" rel="noopener">Rundeck&lt;/a>. A way to automate internal applications, with a form based interface, with support for triggered and scheduled execution.&lt;/li>
&lt;/ul>
&lt;p>One of the aims of Clace is to make it possible for everyone, especially backend engineers, to develop and use simple web interfaces. For use-cases where a CLI was developed previously, a Clace based UI could be built. The backend service could invoke the CLI command or directly call the internal API which need to be exposed. Development and use of simple web interfaces for all types of use-cases should be made easier with Clace.&lt;/p>
&lt;h2>How does it work?&lt;span class="hx-absolute -hx-mt-20" id="how-does-it-work">&lt;/span>
&lt;a href="#how-does-it-work" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Clace applications are configured in &lt;a href="https://github.com/google/starlark-go" target="_blank" rel="noopener">Starlark&lt;/a>, which uses a subset of Python syntax. The API routes are defined to be Hypermedia first, using HTML templates to drive the UI interactions. Templates are written using Go HTML templates. &lt;a href="https://htmx.org/" target="_blank" rel="noopener">HTMX&lt;/a> is used for server interactions. The backend code runs in a security sandbox and every access to plugins need to be explicitly permitted. Application updates can be done with no build step required. Clace integrates with TailwindCSS/DaisyUI for styling and has &lt;a href="https://esbuild.github.io" target="_blank" rel="noopener">esbuild&lt;/a> built-in for &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules" target="_blank" rel="noopener">ESM&lt;/a> support.&lt;/p>
&lt;h2>Security&lt;span class="hx-absolute -hx-mt-20" id="security">&lt;/span>
&lt;a href="#security" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>The Starlark backend code for Clace runs in a sandbox, all external interactions need to go through plugins. The Clace platform implements a security sandbox at the plugin boundary. Applications define what operations they need to be able to perform. The platform enforces these permissions at runtime.&lt;/p>
&lt;p>This &lt;a href="https://clace.io/docs/applications/appsecurity/" >security model&lt;/a> enables the following:&lt;/p>
&lt;ul>
&lt;li>Users can download applications and run on their machine, without worrying about what operations the app can do on their system outside the audited permissions.&lt;/li>
&lt;li>Operations teams can install and approve applications. Further application updates can be handled by the development team, without requiring the operational admins to verify the updated code. As long as the application works within the originally defined permission boundary, application updates will continue to work.&lt;/li>
&lt;li>Application developers can use LLM powered automated code generation tools without worrying about the side-effects of the code. If the generated code tries to perform any operation not previously approved, it will fail.&lt;/li>
&lt;/ul>
&lt;p>The sandbox will ensure that the apps can do only authorized operations. This makes Clace an ideal target for LLM (like GPT) generated applications. The Clace platform will add the authentication/authorization, gitops based deployment and operational monitoring features on top of the generated app.&lt;/p>
&lt;h2>Current Status&lt;span class="hx-absolute -hx-mt-20" id="current-status">&lt;/span>
&lt;a href="#current-status" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Clace is in a beta state currently. Custom application support is functional. Support for loading plugins dynamically is in progress. You can try out Clace (on OSX, Linux or Windows with WSL) by doing:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -L https://clace.io/install.sh &lt;span class="p">|&lt;/span> sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> &lt;span class="nv">$HOME&lt;/span>/clhome/bin/clace.env
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">clace server start &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> sleep &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">clace app create --approve github.com/claceio/apps/system/disk_usage /disk_usage&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>The app should be available at &lt;a href="https://127.0.0.1:25223/disk_usage" target="_blank" rel="noopener">https://127.0.0.1:25223/disk_usage&lt;/a> after allowing the self-signed certificate. &lt;code>admin&lt;/code> is the username, use the password printed by the install script. See &lt;a href="https://clace.io/docs/installation/" >installation&lt;/a> for details.&lt;/p>
&lt;h2>Follow Along&lt;span class="hx-absolute -hx-mt-20" id="follow-along">&lt;/span>
&lt;a href="#follow-along" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>You can keep in touch by these means:&lt;/p>
&lt;ul>
&lt;li>Star the repo at &lt;a href="https://github.com/claceio/clace" target="_blank" rel="noopener">github.com/claceio/clace&lt;/a>&lt;/li>
&lt;li>Sign up for &lt;a href="https://clace.io/#:~:text=Sign%20up%20for%20email%20updates" target="_blank" rel="noopener">Email updates&lt;/a>&lt;/li>
&lt;li>Follow on &lt;a href="https://twitter.com/akclace" target="_blank" rel="noopener">Twitter&lt;/a>&lt;/li>
&lt;li>Subscribe to the blog &lt;a href="https://clace.io/blog/index.xml" target="_blank" rel="noopener">RSS feed&lt;/a>&lt;/li>
&lt;li>Follow ClaceIO on &lt;a href="https://www.linkedin.com/company/claceio" target="_blank" rel="noopener">LinkedIn&lt;/a>&lt;/li>
&lt;li>Connect on &lt;a href="https://discord.gg/t2P8pJFsd7" target="_blank" rel="noopener">Discord&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Use &lt;a href="https://github.com/claceio/clace/discussions" target="_blank" rel="noopener">discussions&lt;/a> feature in Github or raise &lt;a href="https://github.com/claceio/clace/issues" target="_blank" rel="noopener">issues&lt;/a> to provide feedback.&lt;/p></description></item></channel></rss>